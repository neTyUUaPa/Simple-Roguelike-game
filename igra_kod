using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Windows.Threading;

namespace Menu
{
    /// <summary>
    /// Логика взаимодействия для Window1.xaml
    /// </summary>
    public partial class Window1 : Window
    {
        bool GoUp, GoDown, GoLeft, GoRight;
        string LastView, Stop, MoveS, Direct;
        public int ZombieSpeed = 3, HP = 100, spawnEnemy, spawnEnemyX, spawnEnemyY, BulletSpeed = 2;
        double PlayerSpeedX, PlayerSpeedY, Speed = 2, friction = 0.77;
        bool ShootUp, ShootDown, ShootLeft, ShootRight;
        Random Move = new Random();
        List<string> RunMove = new List<string>()
        {
            "Down","Up","Right","Left","LeftUp","RightUp", "RightDown", "LeftDown", "Stay", "Stay", "Stay", "Stay"
        };
        Rectangle box = new Rectangle
        {
            Height = 100,
            Width = 100,
            Fill = Brushes.Black,
            Stroke = Brushes.Yellow,
            Margin = new Thickness(100, 100, 0, 0),
            Tag = "Box",
            VerticalAlignment = VerticalAlignment.Top,
            HorizontalAlignment = HorizontalAlignment.Left,
        };

        Rectangle Player = new Rectangle
        {
            Height = 70,
            Width = 40,
            Fill = Brushes.Aqua,
            Stroke = Brushes.Black,
            Margin = new Thickness(300, 300, 0, 0),
            Tag = "player",
            VerticalAlignment = VerticalAlignment.Top,
            HorizontalAlignment = HorizontalAlignment.Left,

        };

        Grid Grid1 = new Grid
        {
            HorizontalAlignment = HorizontalAlignment.Left,
            VerticalAlignment = VerticalAlignment.Top,
        };

        public Window1()
        {
            InitializeComponent();
            DispatcherTimer timer = new DispatcherTimer();
            DispatcherTimer EnemyMovement = new DispatcherTimer();
            DispatcherTimer PlayerMovement = new DispatcherTimer();
            DispatcherTimer BulletMovement = new DispatcherTimer();
            BulletMovement.Tick += Bullet_Movement;
            BulletMovement.Interval = TimeSpan.FromMilliseconds(1);
            BulletMovement.Start();
            PlayerMovement.Tick += Player_Movement;
            PlayerMovement.Interval = TimeSpan.FromMilliseconds(1);
            PlayerMovement.Start();
            EnemyMovement.Tick += Enemy_Move;
            EnemyMovement.Interval = TimeSpan.FromMilliseconds(500);
            EnemyMovement.Start();
            timer.Tick += CollusionCheck;
            timer.Interval = TimeSpan.FromMilliseconds(16);
            timer.Start();
            Grid1.Children.Add(box);
            Windows.Content = Grid1;
            Grid1.Children.Add(Player);
        }

        public void Enemy_Move(object sender, EventArgs e)
        {
            MoveS = RunMove[Move.Next(0, 8)];
        }

        private void Bullet(string Dir)
        {
            Rectangle a = new Rectangle
            {
                Name = "Bullet",
                Tag = "Bullet" + Dir,
                VerticalAlignment = VerticalAlignment.Top,
                HorizontalAlignment = HorizontalAlignment.Left,
                Height = 5,
                Width = 5,
                Margin = new Thickness(0, 0, 0, 0),
                Fill = Brushes.Yellow,
                Stroke = Brushes.Black
            };
            if (Dir == "Right")
            {
                a.Margin = new Thickness(Player.Margin.Top + Player.Height / 2, Player.Margin.Left + Player.Width, 0, 0);
            }
            if (Dir == "Left")
            {
                a.Margin = new Thickness(Player.Margin.Top + Player.Height / 2, Player.Margin.Left, 0, 0);
            }
            if (Dir == "Up")
            {
                a.Margin = new Thickness(Player.Margin.Top, Player.Margin.Left + Player.Width / 2, 0, 0);
            }
            if (Dir == "Down")
            {
                a.Margin = new Thickness(Player.Margin.Top + Player.Height, Player.Margin.Left + Player.Width / 2, 0, 0);
            }
            Grid1.Children.Add(a);
            Direct = "";
        }

        public class Rectn
        {
            public static Rect create;
        }

        public void Enemy_Spawn(int spawn)
        {
            Random ranX = new Random();
            Random ranY = new Random();
            for (int i = 0; i < spawn; i++)
            {
                Rectangle zombie = new Rectangle
                {
                    Height = 30,
                    Width = 20,
                    Fill = Brushes.Aqua,
                    Stroke = Brushes.Yellow,
                    Margin = new Thickness(ranX.Next(300, 700), ranY.Next(100, 350), 0, 0),
                    Tag = "Enemy",
                    VerticalAlignment = VerticalAlignment.Top,
                    HorizontalAlignment = HorizontalAlignment.Left,
                };

                Grid1.Children.Add(zombie);
                Rect EnemyAgro = new Rect(zombie.Margin.Left - 50, zombie.Margin.Top - 50, 100, 100);
                Rectangle check = new Rectangle
                {
                    Width = 100,
                    Height = 100,
                    Margin = new Thickness(zombie.Margin.Left - 50, zombie.Margin.Top - 50, 0, 0),
                    Stroke = Brushes.Black,
                    HorizontalAlignment = HorizontalAlignment.Left,
                    VerticalAlignment = VerticalAlignment.Top,
                };
                Grid1.Children.Add(check);
                Rectn.create = EnemyAgro;
            }
            spawnEnemy = 0;
        }
        private void Bullet_Movement(object sender, EventArgs e)
        {
            foreach (var x in Grid1.Children.OfType<Rectangle>())
            {
                if (x is Rectangle && (string)x.Tag == "BulletUp")
                {
                    x.Margin = new Thickness(x.Margin.Top - BulletSpeed, x.Margin.Left, 0, 0);
                }
                if (x is Rectangle && (string)x.Tag == "BulletDown")
                {
                    x.Margin = new Thickness(x.Margin.Top + BulletSpeed, x.Margin.Left, 0, 0);
                }
                if (x is Rectangle && (string)x.Tag == "BulletLeft")
                {
                    x.Margin = new Thickness(x.Margin.Top, x.Margin.Left - BulletSpeed, 0, 0);
                }
                if (x is Rectangle && (string)x.Tag == "BulletRight")
                {
                    x.Margin = new Thickness(x.Margin.Top, x.Margin.Left + BulletSpeed, 0, 0);
                }
            }
        }
        private void Player_Movement(object sender, EventArgs e)
        {

            if (GoUp)
            {
                PlayerSpeedY -= Speed;
            }
            if (GoDown)
            {
                PlayerSpeedY += Speed;
            }
            if (GoRight)
            {
                PlayerSpeedX += Speed;
            }
            if (GoLeft)
            {
                PlayerSpeedX -= Speed;
            }

            PlayerSpeedX *= friction;
            PlayerSpeedY *= friction;
            Player.Margin = new Thickness(Player.Margin.Left + PlayerSpeedX, Player.Margin.Top + PlayerSpeedY, 0, 0);
            Collision("x");
            Collision("y");
        }

        public void CollusionCheck(object sender, EventArgs e)
        {
            Rect PlayerHitBox = new Rect(Player.Margin.Left, Player.Margin.Top, Player.ActualWidth, Player.ActualHeight);
            foreach (var x in Grid1.Children.OfType<Rectangle>())
            {
                Rect EnemyAgr = new Rect(x.Margin.Left - 50, x.Margin.Top - 50, 200, 200);
                Rect EnemyHitBox = new Rect(x.Margin.Left, x.Margin.Top, x.ActualWidth, x.ActualHeight);
                if (x is Rectangle && (string)x.Tag == "Enemy")
                {

                    if (EnemyAgr.IntersectsWith(PlayerHitBox))
                    {
                        if (x.Margin.Left < Player.Margin.Left)
                        {
                            x.Margin = new Thickness(x.Margin.Left + ZombieSpeed, x.Margin.Top, 0, 0);
                        }
                        if (x.Margin.Left > Player.Margin.Left)
                        {
                            x.Margin = new Thickness(x.Margin.Left - ZombieSpeed, x.Margin.Top, 0, 0);
                        }
                        if (x.Margin.Top < Player.Margin.Top)
                        {
                            x.Margin = new Thickness(x.Margin.Left, x.Margin.Top + ZombieSpeed, 0, 0);
                        }
                        if (x.Margin.Top > Player.Margin.Top)
                        {
                            x.Margin = new Thickness(x.Margin.Left, x.Margin.Top - ZombieSpeed, 0, 0);
                        }
                    }
                    else
                    {
                        if (EnemyHitBox.IntersectsWith(Rectn.create))
                        {
                            if (MoveS == "Up")
                            {
                                x.Margin = new Thickness(x.Margin.Left, x.Margin.Top - ZombieSpeed, 0, 0);
                            }
                            if (MoveS == "RightUp")
                            {
                                x.Margin = new Thickness(x.Margin.Left + ZombieSpeed, x.Margin.Top - ZombieSpeed, 0, 0);
                            }
                            if (MoveS == "LeftUp")
                            {
                                x.Margin = new Thickness(x.Margin.Left - ZombieSpeed, x.Margin.Top - ZombieSpeed, 0, 0);
                            }
                            if (MoveS == "LeftDown")
                            {
                                x.Margin = new Thickness(x.Margin.Left - ZombieSpeed, x.Margin.Top + ZombieSpeed, 0, 0);
                            }
                            if (MoveS == "RightDown")
                            {
                                x.Margin = new Thickness(x.Margin.Left + ZombieSpeed, x.Margin.Top + ZombieSpeed, 0, 0);
                            }
                            if (MoveS == "Down")
                            {
                                x.Margin = new Thickness(x.Margin.Left, x.Margin.Top + ZombieSpeed, 0, 0);
                            }
                            if (MoveS == "Left")
                            {
                                x.Margin = new Thickness(x.Margin.Left - ZombieSpeed, x.Margin.Top, 0, 0);
                            }
                            if (MoveS == "Right")
                            {
                                x.Margin = new Thickness(x.Margin.Left + ZombieSpeed, x.Margin.Top, 0, 0);
                            }
                        }
                        else
                        {
                            if (x.Margin.Top < Rectn.create.Top)
                            {
                                x.Margin = new Thickness(x.Margin.Left, x.Margin.Top + ZombieSpeed, 0, 0);
                            }
                            if (x.Margin.Top > Rectn.create.Top)
                            {
                                x.Margin = new Thickness(x.Margin.Left, x.Margin.Top - ZombieSpeed, 0, 0);
                            }
                            if (x.Margin.Left < Rectn.create.Left)
                            {
                                x.Margin = new Thickness(x.Margin.Left + ZombieSpeed, x.Margin.Top, 0, 0);
                            }
                            if (x.Margin.Left > Rectn.create.Left)
                            {
                                x.Margin = new Thickness(x.Margin.Left - ZombieSpeed, x.Margin.Top, 0, 0);
                            }
                        }

                    }
                }
            }
        }

        private void Collision(string Dir)
        {
            Rect PlayerHitBox = new Rect(Player.Margin.Left, Player.Margin.Top, Player.ActualWidth, Player.ActualHeight);

            foreach (var x in Grid1.Children.OfType<Rectangle>())
            {
                if (x is Rectangle && (string)x.Tag == "Box")
                {
                    Rect BoxHitBox = new Rect(x.Margin.Left, x.Margin.Top, x.ActualWidth, x.ActualHeight);
                    if (BoxHitBox.IntersectsWith(PlayerHitBox))
                    {
                        if (Dir == "x")
                        {
                            Player.Margin = new Thickness(Player.Margin.Left - PlayerSpeedX, Player.Margin.Top, 0, 0);
                            PlayerSpeedX = 0;
                        }
                        else
                        {
                            Player.Margin = new Thickness(Player.Margin.Left, Player.Margin.Top - PlayerSpeedY, 0, 0);
                            PlayerSpeedY = 0;
                        }
                    }
                }
            }
        }
        private void KeyIsDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.W && Stop != "Up")
            {
                LastView = "Up";
                GoUp = true;
            }
            if (e.Key == Key.S && Stop != "Down")
            {
                LastView = "Down";
                GoDown = true;
            }
            if (e.Key == Key.D && Stop != "Right")
            {
                LastView = "Right";
                GoRight = true;
            }
            if (e.Key == Key.A && Stop != "Left")
            {
                LastView = "Left";
                GoLeft = true;
            }

            if (e.Key == Key.Up)
            {
                ShootUp = true;
                Direct = "Up";
                Bullet(Direct);
            }
            if (e.Key == Key.Down)
            {
                ShootDown = true;
                Direct = "Down";
                Bullet(Direct);
            }
            if (e.Key == Key.Left)
            {
                ShootLeft = true;
                Direct = "Left";
                Bullet(Direct);
            }
            if (e.Key == Key.Right)
            {
                ShootRight = true;
                Direct = "Right";
                Bullet(Direct);
            }

        }
        private void KeyIsUp(object sender, KeyEventArgs e) //механика движения
        {
            if (e.Key == Key.W && Stop != "Up")
            {
                LastView = "";
                GoUp = false;
            }
            if (e.Key == Key.S && Stop != "Down")
            {
                LastView = "";
                GoDown = false;
            }
            if (e.Key == Key.D && Stop != "Right")
            {
                LastView = "";
                GoRight = false;
            }
            if (e.Key == Key.A && Stop != "Left")
            {
                LastView = "";
                GoLeft = false;
            }

            if (e.Key == Key.Up)
            {
                ShootUp = false;
            }
            if (e.Key == Key.Down)
            {
                ShootDown = false;
            }
            if (e.Key == Key.Left)
            {
                ShootLeft = false;
            }
            if (e.Key == Key.Right)
            {
                ShootRight = false;
            }
        }

    }
}
